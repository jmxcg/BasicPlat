----创建数据库platform----
create database platform


----创建表plat_user-----

create table plat_user(id varchar(36) primary key not null,
login_name varchar(100) unique not null,
user_name varchar(100) not null,
password varchar(100) not null);

insert into plat_user values('bf9a4102-10b7-437c-b12e-dd45ed88e78a','admin','admin','admin');

----创建表plat_module-----

create table plat_module
(id varchar(36) primary key not null,parent_id varchar(36) not null default 0,
has_child int not null default 2,levels int not null default 1,
sorts int not null default 0,isValidate int not null default 1,
types int not null default 2,module_name varchar(200) not null,
display_name varchar(200) not null,url varchar(400),
style varchar(100),icon varchar(400),
descn varchar(2000) );

insert into plat_module(id,parent_id,levels,has_child,sorts,isValidate,types,module_name,display_name) values('1000','0',1,1,0,1,1,'系统管理','系统管理');
insert into plat_module(id,parent_id,levels,has_child,sorts,isValidate,types,module_name,display_name) values('1001','1000',2,2,10,1,1,'角色管理','角色管理');
insert into plat_module(id,parent_id,levels,has_child,sorts,isValidate,types,module_name,display_name) values('1002','1000',2,2,20,1,1,'模块管理','模块管理');
insert into plat_module(id,parent_id,levels,has_child,sorts,isValidate,types,module_name,display_name) values('1003','1000',2,2,20,1,1,'授权管理','授权管理');
insert into plat_module(id,parent_id,levels,has_child,sorts,isValidate,types,module_name,display_name) values('1004','1007',2,2,20,1,1,'授权管理11','授权管理');
insert into plat_module(id,parent_id,levels,has_child,sorts,isValidate,types,module_name,display_name) values('1005','1007',2,2,20,1,1,'授权管理12','授权管理');
insert into plat_module(id,parent_id,levels,has_child,sorts,isValidate,types,module_name,display_name) values('1006','1007',2,2,20,1,1,'授权管理13','授权管理');
insert into plat_module(id,parent_id,levels,has_child,sorts,isValidate,types,module_name,display_name) values('1007','1003',2,2,20,1,1,'授权管理1','授权管理');

----创建表plat_module_org-----

create table plat_module_org(
id int primary key not null,
module_id int not null,
types int not null,
obj_id varchar(36) not null);

insert into plat_module_org values(2000,1000,2,'bf9a4102-10b7-437c-b12e-dd45ed88e78a');





树的思路
    public List<BaseTreeNode<Module>> getRoots() {
        // BaseTreeNode<Module> ModuleTreeNode;
        List<Module> list = getList();
        List<BaseTreeNode<Module>> root = new ArrayList<BaseTreeNode<Module>>();
//        BaseTreeNode<Module>[] roots = null;
//        TreeNode<Module> _temp;
//        boolean hasFindParent = false, hasFindChild = false;
        for (Module m : list) {
            BaseTreeNode<Module> oneNode = new BaseTreeNode<Module>();
            oneNode.setTnEntity(m);
            System.out.println(root.size());
            if(root.size()==0){
                root.add(oneNode);
            }else{
                for(BaseTreeNode<Module> node : root){
                   //判断roots里面有没有oneNode的子结点
                    if(node.getParentId().equals(oneNode.getId())){
                        oneNode.addChild(node);
                    }
                    //判断roots里面有没有oneNode的父结点
                    if(node.getId().equals(oneNode.getParentId())){
                        node.addChild(oneNode);
                    }
                }
                root.add(oneNode);
            }
//            // 新结点是否能够插入现有的森林中
//            if (roots != null) {
//                for (int i = 0; i < roots.length; i++) {
//                    _temp = roots[i];
//                    _temp = _temp.findNode(oneNode.getParentId());
//                    if (_temp != null) {
//                        _temp.addChild(oneNode);
//                        hasFindParent = true;
//                        break;
//                    }
//                }
//            }
//            // 新结点的子结点是否在森林中
//            if (!hasFindParent) {
//                if (roots != null) {
//                    for (int i = 0; i < roots.length; i++) {
//                        _temp = roots[i];
//                        if (_temp.getParentId().equals(oneNode.getId())) {
//                            oneNode.addChild(_temp);
//                            // _temp remove from roots
//                            // oneNode insert to roots
//                            // 在roots中，用oneNode替换_temp
//                            hasFindChild = true;
//                            break;
//                        }
//                    }
//                }
//            }
//            if (!hasFindParent && !hasFindChild) {
//                // oneNode加入roots
//            }
        }
        List<BaseTreeNode<Module>> roots = new ArrayList<BaseTreeNode<Module>>();
        for(BaseTreeNode<Module> node : root){
            if(node.getParentId().equals("0")){
                roots.add(node);
            }
        }

        return roots;
    }
}
